



                              README FILE

                        COMPLEX I (Dated 92290)                April 9, 1990 

     Complex I is a second-level screening technique for evaluating the impact
of sources in rural complex terrain as described in section 5.2.1 of the
Guideline on Air Quality Models (revised). Complex I has been modified to meet
the ANSI Fortran 77 standard. Complex I has been compiled and executed on an
IBM-PC compatible using Microsoft Fortran 5.0 and on IBM and VAX mainframes
operating under MVS and VMS systems, respectively. This source code should
also work on most other computers with a Fortran compiler. Execution
statements will vary from computer system to computer system.

     The following is a general discussion concerning preparation of data,
utility programs, and steps needed for execution of Complex I on a PC or
similarly operated system and for execution on an IBM and VAX mainframe. There
is no users guide for Complex I and there are no plans to develop any as of
January 1988.  (Since Complex I is based upon MPTER, the user guide for MPTER
is useful.  Also note the differences from MPTER given in comment statements
in the first few pages of the Complex I source code.)

     Preprocessed meteorological data (PMD) may be used as input to Complex I.
However, the PMD file may not be stored on the same computer system as the air
dispersion model execution code. The PMD is usually stored in an unformatted
form to save space on the storage medium. Data stored using an unformatted
format can not be readily transferred between computers with different
operating systems (e.g. IBM-MVS vs PC- or MS-DOS) because the storage formats
are almost always incompatible. In recognition of this fact, two utility
program listings, MBIN2TEX.FOR and MTEX2BIN.FOR, are listed below with
instructions on how to use them. The first utility program converts the PMD
from an unformatted format to an ASCII (text) format. When the PMD is in ASCII
format, the data can be readily transferred to any other computer system. The
second utility program, MTEX2BIN.FOR, is a slightly enhanced copy of the
program, PREPFILE.FOR, which is available from the PREPFILE.ARC file in the
Utility section of the SCRAM BBS. This second utility program performs the
reverse operation of the first program whereby the ASCII formatted data is
converted back to an unformatted format on the computer system which received
the data. Both of these programs can be cut directly from this text and used
as source code.

     The following is the source code for MBIN2TEX.FOR. It was originally
written to convert unformatted data to ASCII format on an IBM Mainframe. Unit
9 reads the PMD and the data are written to an ASCII file through unit 12.
OPEN statements may have to be inserted after the DIMENSION statement line
depending upon on how a particular computer system connects I/O units with
external data files. 


C  READ UNFORMATTED PREP FILE AND WRITE OUT FORMATTED PREP
      DIMENSION KST(24),SPEED(24),TEMP(24),AFV(24),FVR(24),HLH(2,24)
C     OPEN( 9, FILE='UNFORMATTED MET DATA FILENAME',
C    *         FORM='UNFORMATTED')
C     OPEN(12, FILE='ASCII OUTPUT FILENAME FOR MET DATA')
      READ(9,END=999) ISS,ISY,IUS,IUY
      WRITE(12,25)    ISS,ISY,IUS,IUY
   10 READ(9,END=999)IYEAR,IMONTH,DAY1,KST,SPEED,TEMP,AFV,FVR,HLH
      WRITE(12,50)   IYEAR,IMONTH,DAY1
      WRITE(12,51) KST
      WRITE(12,52) (SPEED(N),N=1,8)
      WRITE(12,52) (SPEED(N),N=9,16)
      WRITE(12,52) (SPEED(N),N=17,24)      
      WRITE(12,53) (TEMP(N),N=1,8)
      WRITE(12,53) (TEMP(N),N=9,16)
      WRITE(12,53) (TEMP(N),N=17,24)
      WRITE(12,54) (AFV(N),N=1,12)
      WRITE(12,54) (AFV(N),N=13,24)
      WRITE(12,54) (FVR(N),N=1,12)
      WRITE(12,54) (FVR(N),N=13,24)
      WRITE(12,55) (HLH(1,N),N=1,8)
      WRITE(12,55) (HLH(1,N),N=9,16)
      WRITE(12,55) (HLH(1,N),N=17,24)
      WRITE(12,55) (HLH(2,N),N=1,8)
      WRITE(12,55) (HLH(2,N),N=9,16)
      WRITE(12,55) (HLH(2,N),N=17,24)
      GO TO 10
   25 FORMAT(I5,I2,I5,I2)
   50 FORMAT(2I2,F4.0)
   51 FORMAT(24I1)
   52 FORMAT(8F7.4)
   53 FORMAT(8F7.3)
   54 FORMAT(8F5.1)
   55 FORMAT(8F7.2)
  999 STOP
      END

     The following are two IBM JCL code segments which are separated by double
spacing. The first is the heart of compile and link JCL while the second
is the heart of the execution JCL code for MBIN2TEX.


//CL           EXEC FORTVCL,PARM=(NOSOURCE,NOMAP,NOXREF)
//FORT.SYSIN   DD DSN=mbin2tex.for source code filename,DISP=SHR
//LKED.SYSLMOD DD DSN=existing.load.module.PO(exec.filename),DISP=NEW


//B2T      EXEC PGM=exec.filename
//STEPLIB  DD DSN=existing.load.module.PO,DISP=SHR
//FT09FOO1 DD DSN=PMD.input.filename,DISP=SHR
//FT12FOO1 DD DSN=ASCII.output.filename,
//         UNIT=SYSDA,SPACE=(TRK,(45,5),RLSE),
//         DCB=(RECFM=FBA,LRECL=80,BLKSIZE=2400),
//         DISP=(NEW,CATLG,KEEP)

     The following are two VAX batch file listings. Both statements assume
that the OPEN statements in the source codes have been uncommented. The first
listing is a two line compile and link listing while the second is the
execution statement.

$FORT MBIN2TEX.FOR
$LINK MBIN2TEX

$RUN MBIN2TEX  

     The conversion back to an unformatted format can be accomplished by using
the second utility, MTEX2BIN.FOR. A sample ASCII PMD file, PREPFILE.TXT, is
available in the utility section of SCRAM in the PREPFILE.ARC file. The ASCII
met data are read in through unit 12. The met data are then written to another
file through unit 9 and stored in an unformatted format. When this program is
executed on an IBM-PC or compatible, the user is prompted for the input and
output filenames or the user can specify the input and output filenames on the
same line with the executable filename. For example:

     MTEX2BIN  drive:metfilename.forinput  drive:metfilename.foroutput. 

       (Note that there are no DOS data I/O direction symbols (<,>).)

Other computer systems may require the filenames to be 'hardwired' into the
code. An example of this hardwired code are the two commented out OPEN
statements; each with a filename specified.


C  READ FORMATTED TEXT FILE AND WRITE OUT UNFORMATTED PREP FILE
      DIMENSION KST(24),SPEED(24),TEMP(24),AFV(24),FVR(24),HLH(2,24)
C     OPEN(12, FILE='MET.IN')
C     OPEN( 9, FILE='MET.OUT', FORM = 'UNFORMATTED')
      READ(12,25,END=999)ISS,ISY,IUS,IUY
      WRITE(9)ISS,ISY,IUS,IUY
   10 READ(12,50,END=999) IYEAR,IMONTH,DAY1
      READ(12,51) KST
      READ(12,52) (SPEED(N),N=1,8)
      READ(12,52) (SPEED(N),N=9,16)
      READ(12,52) (SPEED(N),N=17,24)
      READ(12,53) (TEMP(N),N=1,8)
      READ(12,53) (TEMP(N),N=9,16)
      READ(12,53) (TEMP(N),N=17,24)
      READ(12,54) (AFV(N),N=1,12)
      READ(12,54) (AFV(N),N=13,24)
      READ(12,54) (FVR(N),N=1,12)
      READ(12,54) (FVR(N),N=13,24)
      READ(12,55) (HLH(1,N),N=1,8)
      READ(12,55) (HLH(1,N),N=9,16)
      READ(12,55) (HLH(1,N),N=17,24)
      READ(12,55) (HLH(2,N),N=1,8)
      READ(12,55) (HLH(2,N),N=9,16)
      READ(12,55) (HLH(2,N),N=17,24)
      WRITE(9)IYEAR,IMONTH,DAY1,KST,SPEED,TEMP,AFV,FVR,HLH
      GO TO 10
   25 FORMAT(I5,I2,I5,I2)
   50 FORMAT(2I2,F4.0)
   51 FORMAT(24I1)
   52 FORMAT(8F7.4)
   53 FORMAT(8F7.3)
   54 FORMAT(8F5.1)
   55 FORMAT(8F7.2)
  999 STOP
      END



     A PMD may or may not be used with the primary input file. The primary
input file contains a meteorological data option switch and other program
control values and data. In lieu of a PMD file, meteorological data can be
added to the end of the primary input file data stream. The general input
specifications for this file can be found in the Complex I source code. Test
case input files for IBM-PCs, IBM and VAX mainframes have been included in
COMPLEX1.ARC under the names COMPLEX1.INP, COMPLEX1.RUN and COMPLEX1.INP,
respectively. The test case output file is under the file name, COMPLEX1.OUT.
Codes for compiling and executing the test case on all three systems have also
been provided.

IBM-PC or Compatible Execution Instructions:

     Complex I is a relatively long program for a personal computer. The
source code is approximately 266 Kbytes long. In order to compile and load
Complex I on a PC, Complex I needs to be divided into its subroutines. Two
files, DIVPGM.RME and DIVPGM.TXT, have been provided from the SCRAM BBS
utility section for this purpose. Each subroutine is compiled separately and
then the object files are linked for execution. Two batch files, COMPXPCL.BAT
and COMPXPC.BAT, are included. The first file is for compiling and linking the
subroutines and the other is for executing the test case, respectively. Note
that the Microsoft Fortran 5.0 compilation switches in COMPXPCL.BAT have been
set to compile the subroutines to the ANSI Fortran 77 standard.

     The following instructions assume that files in the COMPLEX1.ARC file
have been copied to their own subdirectory and that all Complex 1 executions
are done from that subdirectory.


     1.  Follow the instructions in DIVPGM.RME and 1) use the Complex I source
         code file, COMPLEX1.TXT, as input along with the full pathname for
         that file's location and 2) name the first file COMPLEX1.FOR.

     2.  Use the batch file, COMPXPCL.BAT, to compile and link the programs in
         step 1 together.The program is now ready for execution. 

     3.  Use the batch file, COMPXPC.BAT, for execution or use the following
         execution line to send the test case output to a disk drive.

          Complex1 < Complex1.INP > Compxtc1.OUT

     4.  Compare the test case output file, COMPXTC1.OUT, with the SCRAM
         output file, COMPLEX1.OUT, for correctness.

     Execution of Complex I on a PC involves the use of DOS data input and
output directed symbols, '<' and '>'. Complex I opens unit 5 first to read
data from the control file. Unit 6 is opened next for output followed then by
unit 11 for optional meteorological data input from disk. When Complex I is
executed using DOS data I/O direction symbols, the order in which Complex I
opens each unit is extremely important. Since Complex I opens unit 5 first for
input, the data filename that needs to be connected to unit 5 must be listed
first after the DOS input symbol, '<', (see examples below). The input unit
that is opened second, unit 11 (PMD), must have the filename associated with
that unit listed second. The same applies when connecting output units to
output filenames and/or devices. Output can be sent direct to a terminal
screen, a disk file, or printer by what follows the DOS data output direction
symbol, '>'. All input and output filenames and devices can be placed in a
Complex I batch file. In the following examples, note that an optional PMD is
being used as the source of meteorological input data and that the output is
sent to: 1) a terminal screen, 2) a printer, and 3) to a disk file for later
usage, respectively.

To send output to the screen:  

   Complex1 < controlfilename metfilename > CON:

To send output to a printer:   

   Complex1 < controlfilename metfilename > PRN:

To send output to a disk file: 

   Complex1 < controlfilename metfilename > drive:output.filename


IBM mainframe execution instructions:

     This section of the read me file contains instructions for compiling,
linking, and executing Complex I on an IBM mainframe running the MVS operating
system. The IBM JCL has been written in a generic form with specific data for
each of the two test cases. The user will be required to substitute actual
names and codes for generic codes (eg FORT(COMPLEX1.TXT) for
source.code.file.name). 

     The following instructions assume that 1) the contents of COMPLEX1.ARC
have been downloaded from SCRAM, dearchived, and uploaded to an IBM mainframe
running the MVS system and 2) the generic codes have been replaced with
specific codes.

     1.  The file, COMPLEX1.ICL, is an example of compile and link JCL for
         COMPLEX1.TXT. Replace the generic code with specific code and submit
         the code for execution.

         //uid JOB (acct,bin),uid,PRTY=2,TIME=(min,sec),NOTIFY=uid
         /*ROUTE PRINT HOLD                                        
         //*                                                         
         //CL           EXEC FORTVCL,PARM=(NOMAP,NOXREF)    
         //*                                                              
         //FORT.SYSIN   DD DSN=source.code.file.name,DISP=SHR          
         //*                                                             
         //LKED.SYSLMOD DD DSN=loadlib(complex1),DISP=NEW           
         // 

                                                           
              Note: Right-hand names are user-specified as follows:

              uid            = user ID
              acct           = account number or information
              bin            = bin number
              loadlib        = file name of load module library 
              complex1       = member name of a partitioned data set.
              min            = minute
              sec            = second
              pmd.file.name  = PMD file name
              printed.output = file name for storing printed output on disk

     2.  After Complex I has been successfully compiled and linked in step 1,
         replace the generic code in the file, COMPLEX1.RUN, with specific
         code and submit the run for execution.

         The following is the JCL test case execution file, COMPLEX1.RUN, that
         has been uploaded onto SCRAM BBS. Be aware that the three lines that
         start with 'ALPHA STK' suffer from 80 column wrap around and that the
         user is advised to use the uploaded file, COMPLEX1.RUN, instead of
         attemping to cut and paste the following code. Also, if a PMD is to
         be used, the '*' after the // needs to be removed on the line that
         reads:

         //*FT11F001 DD DSN=pmd.file.name

         The following is a copy of COMPLEX1.RUN:
         
        //uidjobid JOB (acct,bin),uid,MSGCLASS=A,TIME=(,29),NOTIFY=uid,PRTY=3
        /*ROUTE PRINT HOLD
        //*
        //*
        /*JOBPARM LINES=250
        //*
        //*
        //* UNIT 5 INPUT DATA
        //* UNIT 6 PRINT OUTPUT DATA SET
        //* UNIT 11 PREPROCESSED METEOROLOGICAL DATA FILE
        //*
        //*
        //COMPLEX EXEC PGM=COMPLEX1,REGION=4096K,COND=(4,LT)
        //STEPLIB DD DSN=loadlib,DISP=SHR
        //SYSPRINT DD SYSOUT=A
        //FT05F001 DD DDNAME=SYSIN
        //FT06F001 DD DSN=printed.output,DISP=OLD
        //*FT11F001 DD DSN=pmd.file.name
        //SYSIN DD *
        ALPHA PLANT - 3 STACKS FOR 2-3 HR PERIODS FOR SO2
        MET DATA: SIX HOURS, HYPOTHETICAL WITH VARYING STABILITY
        INPUT BY: T. PIERCE, ENVIRONMENTAL OPERATIONS BRANCH ON 3 OCT 1980
        80,192,12,2,3,3,3,0,1.,1.,0.
        1,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,0
        10.,.1,.15,.2,.25,.3,.3,.5,.5,.5,.5,.0,.0,10.
        ALPHA STK #1      0.      0.   2000.        81.     458.    5.2       
        4.5     100.
        ALPHA STK #2      0.      0.   2000.        81.     458.    3.9       
        7.7     100.
        ALPHA STK #3      0.      0.   1100.        84.     433.    2.6       
        29.     100.
        ENDP
        BETA    1.319     0.        0.        103.
        CHI     1.71      0.        0.        90.
        DELTA   2.50      0.        0.        163.
        EPSILON 2.94      0.        0.        181.
        GAMMA   3.24      0.        0.        210.
        IOTA    5.56      0.        0.        453.
        ENDR
        80,192.,12,1,2.,293.,270.,5000.
        80,192.,13,2,3.,293.,270.,5000.
        80,192.,14,3,4.,293.,270.,5000.
        80,192.,15,4,5.,293.,270.,5000.
        80,192.,16,5,3.,293.,270.,5000.
        80,192.,17,6,2.,293.,270.,5000.
        /*

     3.  Compare the IBM mainframe output with the contents of COMPLEX1.OUT,
         which was provided in the archival file. .


VAX mainframe execution instructions:

     The following instructions assume that the contents of COMPLEX1.ARC have
been downloaded from SCRAM, dearchived, and uploaded to an VAX mainframe
running the VMS system. Both batch files listed in steps 1 and 2 are included
in the archival file, COMPLEX1.ARC, under the names, COMPLEX1.VCL and
COMPLEX1.VAX.

     1.  Use the following execution statements to compile and link COMPLEX1
         or use the compile and link batch file, COMPLEX1.VCL:

         $FORT COMPLEX1.TXT
         $LINK COMPLEX1

     2.  After successfully compiling and linking the code in step 1, the
         Complex 1 test case can be executed by typing in the following or use
         the execution batch file, COMPLEX1.VAX:

         $DEFINE/USER_MODE SYS$INPUT input.filename
         $DEFINE/USER_MODE SYS$OUTPUT output.filename
         $!COPY PMD FOR011.DAT  !remove the first !, if a PMD is used.
         $RUN COMPLEX1

     3.  Compare the VAX mainframe output with the contents of COMPLEX1.OUT,
         which was provided in the archival file. 

     On a 12 Mhz IBM-PC/AT compatible with a math coprocessor chip installed,
Complex I, with 3 sources, 6 hours of meteorological data, and 6 receptors,
took 5 seconds to run. Part of this time was due to loading the executable
code into memory. 

     If you have any questions or comments, please call Peter Eckhoff at (919)
541-5385 or leave E-mail on the SCRAM BBS.

